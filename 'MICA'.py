import tkinter as tk
from tkinter import ttk
import tensorflow as tf
import numpy as np
import pandas as pd
import keras
from keras import backend as K
from PIL import Image, ImageTk
from keras.src import backend
from keras.utils import custom_object_scope


def r_square(y_obs, y_pred):
    SS_res =  backend.sum(backend.square(y_obs - y_pred))
    SS_tot = backend.sum(backend.square(y_obs - backend.mean(y_obs)))
    return (1 - SS_res/(SS_tot + backend.epsilon()))
def mean_absolute_percentage_error(y_obs, y_pred):
    y_obs, y_pred = np.array(y_obs), np.array(y_pred)
    y_obs=y_obs.reshape(-1,1)
    #y_obs, y_pred =check_array(y_obs, y_pred)
    return  np.mean(np.abs((y_obs - y_pred) / y_obs)) * 100
def mean_absolute_percentage_error2(y_obs, y_pred): #for when the MAPE doesnt need reshaping
    y_obs, y_pred = np.array(y_obs), np.array(y_pred)
    #y_obs=y_obs.reshape(-1,1)
    #y_obs, y_pred =check_array(y_obs, y_pred)
    return  np.mean(np.abs((y_obs - y_pred) / y_obs)) * 100
def rmse(y_obs, y_pred):
    return backend.sqrt(backend.mean(backend.square(y_pred - y_obs), axis=-1))
def mse(y_obs, y_pred):
    return backend.mean(backend.square(y_pred - y_obs), axis=-1)
class MainApp:
    def __init__(self, root):
        self.root = root
        self.root.title("DUT-Digital Chemistry")
        window_width = 807
        window_height = 503
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # 设置背景图片
        image_path = "D:\\background.jpg"  # 替换为你的图像路径
        image = Image.open(image_path)
        image = image.resize((window_width, window_height), Image.Resampling.LANCZOS)
        self.background_image = ImageTk.PhotoImage(image)
        self.background_label = tk.Label(root, image=self.background_image)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)
        self.options = ["Prediction of single emulsion droplet diameter", "Prediction of single emulsion droplet generation rate",
                        "Directional design of target single emulsion droplet","Prediction of outer diameter of double emulsion droplet",
                        "Prediction of inner diameter of double emulsion droplet","Prediction of double emulsion droplet generation rate",
                        "Directional design of target double emulsion droplet"]
        self.create_widgets()

    def create_widgets(self):
        self.dropdown = ttk.Combobox(self.root, width=50,font=("Arial",10),values=self.options)
        self.dropdown.place(relx=0.5, rely=0.4,anchor='center')

        self.button = tk.Button(self.root, text="model select",font=("Arial",10), command=self.switch_page)
        self.button.place(relx=0.5, rely=0.6, anchor='center')



    def switch_page(self):
        selected_option = self.dropdown.get()
        if selected_option == "Prediction of single emulsion droplet diameter":
            self.create_page1()
        elif selected_option == "Prediction of single emulsion droplet generation rate":
            self.create_page2()
        elif selected_option == "Directional design of target single emulsion droplet":
            self.create_page3()
        elif selected_option == "Prediction of outer diameter of double emulsion droplet":
            self.create_page4()
        elif selected_option == "Prediction of inner diameter of double emulsion droplet":
            self.create_page5()
        elif selected_option == "Prediction of double emulsion droplet generation rate":
            self.create_page6()
        elif selected_option == "Directional design of target double emulsion droplet":
            self.create_page7()

    def create_page1(self):
        page1 = tk.Toplevel(self.root)
        page1.geometry("800x400+500+350")
        label1 = tk.Label(page1, text="Prediction of single emulsion droplet diameter",font="Arial")
        label1.place(relx=0.5,rely=0.1, anchor='center')
        page3_ = tk.Toplevel(page1)
        page3_.geometry("550x500+500+350")
        image = Image.open("D:\double modle\desk_2.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)


        label = tk.Label(page3_, image=photo)
        label.place(relx=0)
        label.image = photo

        self.Entry1 = tk.Entry(page1)
        self.Entry1.place(relx=0.5,rely=0.2, anchor='center',)
        label2 = tk.Label(page1, text="L1")
        label2.place(relx=0.3,rely=0.2, anchor='center')
        label2_ = tk.Label(page1, text="(50μm<x<250μm)")
        label2_.place(relx=0.7, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page1)
        self.Entry2.place(relx=0.5,rely=0.3, anchor='center')
        label3 = tk.Label(page1, text="D1")
        label3.place(relx=0.3,rely=0.3, anchor='center')
        label3_ = tk.Label(page1, text="(0μm<x<350μm)")
        label3_.place(relx=0.7, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page1)
        self.Entry3.place(relx=0.5,rely=0.4, anchor='center')
        label4 = tk.Label(page1, text="Outer fluid viscosity")
        label4.place(relx=0.3,rely=0.4, anchor='center')
        label4_ = tk.Label(page1, text="(1mm^2/s<x<45mm^2/s)")
        label4_.place(relx=0.7, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page1)
        self.Entry4.place(relx=0.5,rely=0.5, anchor='center')
        label5 = tk.Label(page1, text="Inner fluid Viscosity")
        label5.place(relx=0.3,rely=0.5, anchor='center')
        label5_ = tk.Label(page1, text="(1mm^2/s<x<20mm^2/s)")
        label5_.place(relx=0.7, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page1)
        self.Entry5.place(relx=0.5,rely=0.6, anchor='center')
        label6 = tk.Label(page1, text="Outer fluid velocity")
        label6.place(relx=0.3,rely=0.6, anchor='center')
        label6_ = tk.Label(page1, text="(50μL/min<x<350μL/min)")
        label6_.place(relx=0.7, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page1)
        self.Entry6.place(relx=0.5,rely=0.7, anchor='center')
        label7 = tk.Label(page1, text="Inner fluid velocity")
        label7.place(relx=0.3,rely=0.7, anchor='center')
        label7_ = tk.Label(page1, text="(30μL/min<x<200μL/min)")
        label7_.place(relx=0.7, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page1)
        self.Entry7.place(relx=0.5,rely=0.8, anchor='center')
        label8 = tk.Label(page1, text="OF/IF interaction tension")
        label8.place(relx=0.3,rely=0.8, anchor='center')
        label8_ = tk.Label(page1, text="(2mN/m<x<30mN/m)")
        label8_.place(relx=0.7, rely=0.8, anchor='center')

        Btonn1 = tk.Button(page1, text="OK", command=self.btn_click)
        Btonn1.place(relx=0.5,rely=0.9, anchor='center')


    def btn_click(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()


        x1 = int(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        v1 = [[x1, x2, x3 / x4, x3 * x5 / x7, x5, x6, x5 / x6]]
        v2 = pd.DataFrame(v1, columns=['孔口宽度', '插入深度', '黏度比', '毛细管数', '流动相流速', '分散相流速', '流速比'])
        custom_objects = {'rmse': rmse, 'r_square': r_square}
        with custom_object_scope(custom_objects):
            model = tf.keras.models.load_model("D:\double modle.h5")
            y = model.predict(v2)
            xianshi = tk.Toplevel()
            xianshi.geometry("400x200+500+350")
            xianshi.title("result")
            self.xianshi_label = tk.Entry(xianshi)
            self.xianshi_label.insert(0, str(y))
            self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
            self.labels_ = tk.Label(xianshi, text="单乳液滴直径")
            self.labels_.place(relx=0.35, rely=0.5, anchor='center')
            self.labels = tk.Label(xianshi, text="μm")
            self.labels.place(relx=0.6, rely=0.5, anchor='center')

    def create_page2(self):
        page2 = tk.Toplevel(self.root)
        page2.geometry("800x400+500+350")
        label1 = tk.Label(page2, text="Prediction of single emulsion droplet generation rate", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        page3_ = tk.Toplevel(page2)
        page3_.geometry("550x500+500+350")
        image = Image.open("D:\double modle\desk_2.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)


        label = tk.Label(page3_, image=photo)
        label.place(relx=0)
        label.image = photo

        self.Entry1 = tk.Entry(page2)
        self.Entry1.place(relx=0.5, rely=0.2, anchor='center')
        label2 = tk.Label(page2, text="L1")
        label2.place(relx=0.3, rely=0.2, anchor='center')
        label2_ = tk.Label(page2, text="(50μm<x<250μm)")
        label2_.place(relx=0.7, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page2)
        self.Entry2.place(relx=0.5, rely=0.3, anchor='center')
        label3 = tk.Label(page2, text="D1")
        label3.place(relx=0.3, rely=0.3, anchor='center')
        label3_ = tk.Label(page2, text="(0μm<x<350μm)")
        label3_.place(relx=0.7, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page2)
        self.Entry3.place(relx=0.5, rely=0.4, anchor='center')
        label4 = tk.Label(page2, text="Outer fluid viscosity")
        label4.place(relx=0.3, rely=0.4, anchor='center')
        label4_ = tk.Label(page2, text="(1mm^2/s<x<45mm^2/s)")
        label4_.place(relx=0.7, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page2)
        self.Entry4.place(relx=0.5, rely=0.5, anchor='center')
        label5 = tk.Label(page2, text="Inner fluid viscosity")
        label5.place(relx=0.3, rely=0.5, anchor='center')
        label5_ = tk.Label(page2, text="(1mm^2/s<x<20mm^2/s)")
        label5_.place(relx=0.7, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page2)
        self.Entry5.place(relx=0.5, rely=0.6, anchor='center')
        label6 = tk.Label(page2, text="Outer fluid velocity")
        label6.place(relx=0.3, rely=0.6, anchor='center')
        label6_ = tk.Label(page2, text="(50μL/min<x<350μL/min)")
        label6_.place(relx=0.7, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page2)
        self.Entry6.place(relx=0.5, rely=0.7, anchor='center')
        label7 = tk.Label(page2, text="Inner fluid velocity")
        label7.place(relx=0.3, rely=0.7, anchor='center')
        label7_ = tk.Label(page2, text="(30μL/min<x<200μL/min)")
        label7_.place(relx=0.7, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page2)
        self.Entry7.place(relx=0.5, rely=0.8, anchor='center')
        label8 = tk.Label(page2, text="OF/IF interaction tension")
        label8.place(relx=0.3, rely=0.8, anchor='center')
        label8_ = tk.Label(page2, text="(2mN/m<x<30mN/m)")
        label8_.place(relx=0.7, rely=0.8, anchor='center')

        Btonn1 = tk.Button(page2, text="OK", command=self.btn_click2)
        Btonn1.place(relx=0.5, rely=0.9, anchor='center')
    def btn_click2(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()

        x1 = int(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        v1 = [[x1, x2, x3 / x4, x3 * x5 / x7, x5, x6, x5 / x6]]
        v2 = pd.DataFrame(v1,
                          columns=['孔口宽度', '插入深度', '黏度比', '毛细管数', '流动相流速', '分散相流速', '流速比'])
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
            model = tf.keras.models.load_model("D:\double modle2.h5")
            y = model.predict(v2)
            xianshi = tk.Toplevel()
            xianshi.geometry("400x200+500+350")
            xianshi.title("计算结果")
            self.xianshi_label = tk.Entry(xianshi)
            self.xianshi_label.insert(0, str(x1))
            self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
            self.labels = tk.Label(xianshi, text="Hz")
            self.labels.place(relx=0.6, rely=0.5, anchor='center')
            self.labels_ = tk.Label(xianshi, text="single emulsion droplet generation rate")
            self.labels_.place(relx=0.35, rely=0.5, anchor='center')
    def create_page3(self):
        page3 = tk.Toplevel(self.root)
        page3.geometry("800x400+500+350")
        label1 = tk.Label(page3, text="Directional design of target single emulsion droplet", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        page3_ =tk.Toplevel(page3)
        page3_.geometry("550x500+500+350")
        image = Image.open("D:\double modle\desk_2.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)


        label = tk.Label(page3_, image=photo)
        label.place(relx=0)


        label.image = photo

        self.Entry1 = tk.Entry(page3)
        self.Entry1.place(relx=0.5, rely=0.2, anchor='center')
        label2 = tk.Label(page3, text="L1")
        label2.place(relx=0.3, rely=0.2, anchor='center')
        label2_ = tk.Label(page3, text="(50μm<x<250μm)")
        label2_.place(relx=0.7, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page3)
        self.Entry2.place(relx=0.5, rely=0.3, anchor='center')
        label3 = tk.Label(page3, text="D1")
        label3.place(relx=0.3, rely=0.3, anchor='center')
        label3_ = tk.Label(page3, text="(0μm<x<350μm)")
        label3_.place(relx=0.7, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page3)
        self.Entry3.place(relx=0.5, rely=0.4, anchor='center')
        label4 = tk.Label(page3, text="Outer fluid viscosity")
        label4.place(relx=0.3, rely=0.4, anchor='center')
        label4_ = tk.Label(page3, text="(1mm^2/s<x<45mm^2/s)")
        label4_.place(relx=0.7, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page3)
        self.Entry4.place(relx=0.5, rely=0.5, anchor='center')
        label5 = tk.Label(page3, text="Inner fluid viscosity")
        label5.place(relx=0.3, rely=0.5, anchor='center')
        label5_ = tk.Label(page3, text="(1mm^2/s<x<20mm^2/s)")
        label5_.place(relx=0.7, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page3)
        self.Entry5.place(relx=0.5, rely=0.6, anchor='center')
        label6 = tk.Label(page3, text="Outer fluid velocity")
        label6.place(relx=0.3, rely=0.6, anchor='center')
        label6_ = tk.Label(page3, text="(50μL/min<x<350μL/min)")
        label6_.place(relx=0.7, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page3)
        self.Entry6.place(relx=0.5, rely=0.7, anchor='center')
        label7 = tk.Label(page3, text="Inner fluid velocity")
        label7.place(relx=0.3, rely=0.7, anchor='center')
        label7_ = tk.Label(page3, text="(30μL/min<x<200μL/min)")
        label7_.place(relx=0.7, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page3)
        self.Entry7.place(relx=0.5, rely=0.8, anchor='center')
        label8 = tk.Label(page3, text="OF/IF interaction tension")
        label8.place(relx=0.3, rely=0.8, anchor='center')
        label8_ = tk.Label(page3, text="(2mN/m<x<30mN/m)")
        label8_.place(relx=0.7, rely=0.8, anchor='center')

        Btonn1 = tk.Button(page3, text="OK", command=self.btn_click3)
        Btonn1.place(relx=0.5, rely=0.9, anchor='center')

    def btn_click3(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()

        x1 = int(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        v1 = [[x1, x2, x3 / x4, x3 * x5 / x7, x5, x6, x5 / x6]]
        v2 = pd.DataFrame(v1,
                          columns=['孔口宽度', '插入深度', '黏度比', '毛细管数', '液滴直径/um', '分散相流速', '流速比'])
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
            model = tf.keras.models.load_model("D:\double modle3.h5")
            y = model.predict(v2)
            xianshi = tk.Toplevel()
            xianshi.geometry("400x200+500+350")
            xianshi.title('result')
            self.xianshi_label = tk.Entry(xianshi)
            self.xianshi_label.insert(0, str(x1))
            self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
            self.labels = tk.Label(xianshi, text="μL/min")
            self.labels.place(relx=0.6, rely=0.5, anchor='center')
            self.labels_ = tk.Label(xianshi, text="Single emulsion outer fluid rate")
            self.labels_.place(relx=0.35, rely=0.5, anchor='center')
    def create_page4(self):
        page4 = tk.Toplevel(self.root)
        page4.geometry("800x400+500+350")
        label1 = tk.Label(page4, text="Prediction of outer diameter of double emulsion droplet", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        image = Image.open("C:\\Users\李浩\Desktop\desk_3.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)

        self.Entry1 = tk.Entry(page4)
        self.Entry1.place(relx=0.3, rely=0.2, anchor='center')
        label.image = photo
        label2 = tk.Label(page4, text="L1")
        label2.place(relx=0.1, rely=0.2, anchor='center')
        label2_ = tk.Label(page4, text="(150μm<x<300μm)")
        label2_.place(relx=0.4, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page4)
        self.Entry2.place(relx=0.3, rely=0.3, anchor='center')
        label3 = tk.Label(page4, text="L2")
        label3.place(relx=0.1, rely=0.3, anchor='center')
        label3_ = tk.Label(page4, text="(30μm<x<100μm)")
        label3_.place(relx=0.4, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page4)
        self.Entry3.place(relx=0.3, rely=0.4, anchor='center')
        label4 = tk.Label(page4, text="D1")
        label4.place(relx=0.1, rely=0.4, anchor='center')
        label4_ = tk.Label(page4, text="(100μm<x<150μm)")
        label4_.place(relx=0.4, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page4)
        self.Entry4.place(relx=0.3, rely=0.5, anchor='center')
        label5 = tk.Label(page4, text="D2")
        label5.place(relx=0.1, rely=0.5, anchor='center')
        label5_ = tk.Label(page4, text="(50μm<x<100μm)")
        label5_.place(relx=0.4, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page4)
        self.Entry5.place(relx=0.3, rely=0.6, anchor='center')
        label6 = tk.Label(page4, text="Outer fluid velocity")
        label6.place(relx=0.1, rely=0.6, anchor='center')
        label6_ = tk.Label(page4, text="(150μL/min<x<300μL/min)")
        label6_.place(relx=0.4, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page4)
        self.Entry6.place(relx=0.3, rely=0.7, anchor='center')
        label7 = tk.Label(page4, text="Middle fluid velocity")
        label7.place(relx=0.1, rely=0.7, anchor='center')
        label7_ = tk.Label(page4, text="(30μL/min<x<150μL/min)")
        label7_.place(relx=0.4, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page4)
        self.Entry7.place(relx=0.3, rely=0.8, anchor='center')
        label8 = tk.Label(page4, text="Inner fluid velocity")
        label8.place(relx=0.1, rely=0.8, anchor='center')
        label8_ = tk.Label(page4, text="(5μL/min<x<140μL/min)")
        label8_.place(relx=0.4, rely=0.8, anchor='center')
        self.Entry8 = tk.Entry(page4)
        self.Entry8.place(relx=0.3, rely=0.9, anchor='center')
        label9 = tk.Label(page4, text="Outer fluid viscosity")
        label9.place(relx=0.1, rely=0.9, anchor='center')
        label9_ = tk.Label(page4, text="(1mm^2/s<x<40mm^2/s)")
        label9_.place(relx=0.4, rely=0.9, anchor='center')
        self.Entry9 = tk.Entry(page4)
        self.Entry9.place(relx=0.8, rely=0.2, anchor='center')
        label10 = tk.Label(page4, text="Middle fluid viscosity")
        label10.place(relx=0.6, rely=0.2, anchor='center')
        label10_ = tk.Label(page4, text="(1mm^2/s<x<20mm^2/s)")
        label10_.place(relx=0.9, rely=0.2, anchor='center')
        self.Entry10 = tk.Entry(page4)
        self.Entry10.place(relx=0.8, rely=0.3, anchor='center')
        label11 = tk.Label(page4, text="Inner fluid viscosity")
        label11.place(relx=0.6, rely=0.3, anchor='center')
        label11_ = tk.Label(page4, text="(1mm^2/s<x<20mm^2/s)")
        label11_.place(relx=0.9, rely=0.3, anchor='center')
        self.Entry11 = tk.Entry(page4)
        self.Entry11.place(relx=0.8, rely=0.4, anchor='center')
        label12 = tk.Label(page4, text="OF/MF interaction tension")
        label12.place(relx=0.6, rely=0.4, anchor='center')
        label12_ = tk.Label(page4, text="(1mN/m<x<5mN/m)")
        label12_.place(relx=0.9, rely=0.4, anchor='center')
        self.Entry12 = tk.Entry(page4)
        self.Entry12.place(relx=0.8, rely=0.5, anchor='center')
        label13 = tk.Label(page4, text="MF/IF interaction tension")
        label13.place(relx=0.6, rely=0.5, anchor='center')
        label13_ = tk.Label(page4, text="(1mN/m<x<3mN/m)")
        label13_.place(relx=0.9, rely=0.5, anchor='center')

        Btonn1 = tk.Button(page4, text="OK", command=self.btn_click4)
        Btonn1.place(relx=0.7, rely=0.6, anchor='center')
    def btn_click4(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()
        x8 = self.Entry8.get()
        x9 = self.Entry9.get()
        x10 = self.Entry10.get()
        x11 = self.Entry11.get()
        x12 = self.Entry12.get()



        x1 = float(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        x8 = float(x8)
        x9 = float(x9)
        x10 = float(x10)
        x11 = float(x11)
        x12 = float(x12)
        v1 = [[x1, x2, x3, x4, x5, x6, x7, x5 / x6, x6 / x7, x8 / x9, x9 / x10, x11, x12, x5 * x8 / x11, x6 * x9 / x12]]
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
           modle_ = keras.models.load_model('D:\double modle4.h5')
           v2 = pd.DataFrame(v1, columns=['L1/um', 'L2/um', 'D1/um', 'D2/um', 'Uof', 'Umf', 'Uif',
                                       'Uo/m',
                                       '中/内流速比', '外/中粘度比', '中/内粘度比', '外/中界面张力', '中/内界面张力'
            , '毛细管数Ca1', '毛细管数Ca2'])
           y = modle_.predict(v2)
           xianshi = tk.Toplevel()
           xianshi.geometry("400x200+500+350")
           xianshi.title("result")
           self.xianshi_label = tk.Entry(xianshi)
           self.xianshi_label.insert(0, str(y))
           self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
           self.labels = tk.Label(xianshi, text="μm")
           self.labels.place(relx=0.6, rely=0.5, anchor='center')
           self.labels_ = tk.Label(xianshi, text="outer diameter of double emulsion droplet")
           self.labels_.place(relx=0.35, rely=0.5, anchor='center')
    def create_page5(self):
        page5 = tk.Toplevel(self.root)
        page5.geometry("800x400+500+350")
        label1 = tk.Label(page5, text="Prediction of inner diameter of double emulsion droplet", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        image = Image.open("C:\\Users\李浩\Desktop\desk_3.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)
        label.image = photo
        self.Entry1 = tk.Entry(page5)
        self.Entry1.place(relx=0.3, rely=0.2, anchor='center')
        label.image = photo
        label2 = tk.Label(page5, text="L1")
        label2.place(relx=0.1, rely=0.2, anchor='center')
        label2_ = tk.Label(page5, text="(150μm<x<300μm)")
        label2_.place(relx=0.4, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page5)
        self.Entry2.place(relx=0.3, rely=0.3, anchor='center')
        label3 = tk.Label(page5, text="L2")
        label3.place(relx=0.1, rely=0.3, anchor='center')
        label3_ = tk.Label(page5, text="(30μm<x<100μm)")
        label3_.place(relx=0.4, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page5)
        self.Entry3.place(relx=0.3, rely=0.4, anchor='center')
        label4 = tk.Label(page5, text="D1")
        label4.place(relx=0.1, rely=0.4, anchor='center')
        label4_ = tk.Label(page5, text="(100μm<x<150μm)")
        label4_.place(relx=0.4, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page5)
        self.Entry4.place(relx=0.3, rely=0.5, anchor='center')
        label5 = tk.Label(page5, text="D2")
        label5.place(relx=0.1, rely=0.5, anchor='center')
        label5_ = tk.Label(page5, text="(50μm<x<100μm)")
        label5_.place(relx=0.4, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page5)
        self.Entry5.place(relx=0.3, rely=0.6, anchor='center')
        label6 = tk.Label(page5, text="Outer fluid velocity")
        label6.place(relx=0.1, rely=0.6, anchor='center')
        label6_ = tk.Label(page5, text="(150μL/min<x<300μL/min)")
        label6_.place(relx=0.4, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page5)
        self.Entry6.place(relx=0.3, rely=0.7, anchor='center')
        label7 = tk.Label(page5, text="Middle fluid velocity")
        label7.place(relx=0.1, rely=0.7, anchor='center')
        label7_ = tk.Label(page5, text="(30μL/min<x<150μL/min)")
        label7_.place(relx=0.4, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page5)
        self.Entry7.place(relx=0.3, rely=0.8, anchor='center')
        label8 = tk.Label(page5, text="Inner fluid velocity")
        label8.place(relx=0.1, rely=0.8, anchor='center')
        label8_ = tk.Label(page5, text="(5μL/min<x<140μL/min)")
        label8_.place(relx=0.4, rely=0.8, anchor='center')
        self.Entry8 = tk.Entry(page5)
        self.Entry8.place(relx=0.3, rely=0.9, anchor='center')
        label9 = tk.Label(page5, text="Outer fluid viscosity")
        label9.place(relx=0.1, rely=0.9, anchor='center')
        label9_ = tk.Label(page5, text="(1mm^2/s<x<40mm^2/s)")
        label9_.place(relx=0.4, rely=0.9, anchor='center')
        self.Entry9 = tk.Entry(page5)
        self.Entry9.place(relx=0.8, rely=0.2, anchor='center')
        label10 = tk.Label(page5, text="Middle fluid viscosity")
        label10.place(relx=0.6, rely=0.2, anchor='center')
        label10_ = tk.Label(page5, text="(1mm^2/s<x<20mm^2/s)")
        label10_.place(relx=0.9, rely=0.2, anchor='center')
        self.Entry10 = tk.Entry(page5)
        self.Entry10.place(relx=0.8, rely=0.3, anchor='center')
        label11 = tk.Label(page5, text="Inner fluid viscosity")
        label11.place(relx=0.6, rely=0.3, anchor='center')
        label11_ = tk.Label(page5, text="(1mm^2/s<x<20mm^2/s)")
        label11_.place(relx=0.9, rely=0.3, anchor='center')
        self.Entry11 = tk.Entry(page5)
        self.Entry11.place(relx=0.8, rely=0.4, anchor='center')
        label12 = tk.Label(page5, text="OF/MF interaction tension")
        label12.place(relx=0.6, rely=0.4, anchor='center')
        label12_ = tk.Label(page5, text="(1mN/m<x<5mN/m)")
        label12_.place(relx=0.9, rely=0.4, anchor='center')
        self.Entry12 = tk.Entry(page5)
        self.Entry12.place(relx=0.8, rely=0.5, anchor='center')
        label13 = tk.Label(page5, text="MF/IF interaction tension")
        label13.place(relx=0.6, rely=0.5, anchor='center')
        label13_ = tk.Label(page5, text="(1mN/m<x<3mN/m)")
        label13_.place(relx=0.9, rely=0.5, anchor='center')

        Btonn1 = tk.Button(page5, text="OK", command=self.btn_click5)
        Btonn1.place(relx=0.7, rely=0.6, anchor='center')
    def btn_click5(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()
        x8 = self.Entry8.get()
        x9 = self.Entry9.get()
        x10 = self.Entry10.get()
        x11 = self.Entry11.get()
        x12 = self.Entry12.get()



        x1 = float(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        x8 = float(x8)
        x9 = float(x9)
        x10 = float(x10)
        x11 = float(x11)
        x12 = float(x12)
        v1 = [[x1, x2, x3, x4, x5, x6, x7, x5 / x6, x6 / x7, x8 / x9, x9 / x10, x11, x12, x5 * x8 / x11, x6 * x9 / x12]]
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
           modle_ = keras.models.load_model('D:\double modle5.h5')
           v2 = pd.DataFrame(v1, columns=['L1/um', 'L2/um', 'D1/um', 'D2/um', 'Uof', 'Umf', 'Uif',
                                       'Uo/m',
                                       'Um/i', 'λo/m', 'λm/i', 'λo/m', 'λm/i'
            , 'Ca1', 'Ca2'])
           y = modle_.predict(v2)
           xianshi = tk.Toplevel()
           xianshi.geometry("400x200+500+350")
           xianshi.title("result")
           self.xianshi_label = tk.Entry(xianshi)
           self.xianshi_label.insert(0, str(y))
           self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
           self.labels = tk.Label(xianshi, text="μm")
           self.labels.place(relx=0.6, rely=0.5, anchor='center')
           self.labels_ = tk.Label(xianshi, text="inner diameter of double emulsion droplet")
           self.labels_.place(relx=0.35, rely=0.5, anchor='center')
    def create_page6(self):
        page6 = tk.Toplevel(self.root)
        page6.geometry("800x400+500+350")
        label1 = tk.Label(page6, text="Prediction of generation rate of double emulsion droplet", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        image = Image.open("C:\\Users\李浩\Desktop\desk_3.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)
        label.image = photo
        self.Entry1 = tk.Entry(page6)
        self.Entry1.place(relx=0.3, rely=0.2, anchor='center')
        label2 = tk.Label(page6, text="L1")
        label2.place(relx=0.1, rely=0.2, anchor='center')
        label2_ = tk.Label(page6, text="(150μm<x<300μm)")
        label2_.place(relx=0.4, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page6)
        self.Entry2.place(relx=0.3, rely=0.3, anchor='center')
        label3 = tk.Label(page6, text="L2")
        label3.place(relx=0.1, rely=0.3, anchor='center')
        label3_ = tk.Label(page6, text="(30μm<x<100μm)")
        label3_.place(relx=0.4, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page6)
        self.Entry3.place(relx=0.3, rely=0.4, anchor='center')
        label4 = tk.Label(page6, text="D1")
        label4.place(relx=0.1, rely=0.4, anchor='center')
        label4_ = tk.Label(page6, text="(100μm<x<150μm)")
        label4_.place(relx=0.4, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page6)
        self.Entry4.place(relx=0.3, rely=0.5, anchor='center')
        label5 = tk.Label(page6, text="D2")
        label5.place(relx=0.1, rely=0.5, anchor='center')
        label5_ = tk.Label(page6, text="(50μm<x<100μm)")
        label5_.place(relx=0.4, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page6)
        self.Entry5.place(relx=0.3, rely=0.6, anchor='center')
        label6 = tk.Label(page6, text="Outer fluid velocity")
        label6.place(relx=0.1, rely=0.6, anchor='center')
        label6_ = tk.Label(page6, text="(150μL/min<x<300μL/min)")
        label6_.place(relx=0.4, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page6)
        self.Entry6.place(relx=0.3, rely=0.7, anchor='center')
        label7 = tk.Label(page6, text="Middle fluid velocity")
        label7.place(relx=0.1, rely=0.7, anchor='center')
        label7_ = tk.Label(page6, text="(30μL/min<x<150μL/min)")
        label7_.place(relx=0.4, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page6)
        self.Entry7.place(relx=0.3, rely=0.8, anchor='center')
        label8 = tk.Label(page6, text="Inner fluid velocity")
        label8.place(relx=0.1, rely=0.8, anchor='center')
        label8_ = tk.Label(page6, text="(5μL/min<x<140μL/min)")
        label8_.place(relx=0.4, rely=0.8, anchor='center')
        self.Entry8 = tk.Entry(page6)
        self.Entry8.place(relx=0.3, rely=0.9, anchor='center')
        label9 = tk.Label(page6, text="Outer fluid viscosity")
        label9.place(relx=0.1, rely=0.9, anchor='center')
        label9_ = tk.Label(page6, text="(1mm^2/s<x<40mm^2/s)")
        label9_.place(relx=0.4, rely=0.9, anchor='center')
        self.Entry9 = tk.Entry(page6)
        self.Entry9.place(relx=0.8, rely=0.2, anchor='center')
        label10 = tk.Label(page6, text="Middle fluid viscosity")
        label10.place(relx=0.6, rely=0.2, anchor='center')
        label10_ = tk.Label(page6, text="(1mm^2/s<x<20mm^2/s)")
        label10_.place(relx=0.9, rely=0.2, anchor='center')
        self.Entry10 = tk.Entry(page6)
        self.Entry10.place(relx=0.8, rely=0.3, anchor='center')
        label11 = tk.Label(page6, text="Inner fluid viscosity")
        label11.place(relx=0.6, rely=0.3, anchor='center')
        label11_ = tk.Label(page6, text="(1mm^2/s<x<20mm^2/s)")
        label11_.place(relx=0.9, rely=0.3, anchor='center')
        self.Entry11 = tk.Entry(page6)
        self.Entry11.place(relx=0.8, rely=0.4, anchor='center')
        label12 = tk.Label(page6, text="OF/MF interaction tension")
        label12.place(relx=0.6, rely=0.4, anchor='center')
        label12_ = tk.Label(page6, text="(1mN/m<x<5mN/m)")
        label12_.place(relx=0.9, rely=0.4, anchor='center')
        self.Entry12 = tk.Entry(page6)
        self.Entry12.place(relx=0.8, rely=0.5, anchor='center')
        label13 = tk.Label(page6, text="MF/IF interaction tension")
        label13.place(relx=0.6, rely=0.5, anchor='center')
        label13_ = tk.Label(page6, text="(1mN/m<x<3mN/m)")
        label13_.place(relx=0.9, rely=0.5, anchor='center')

        Btonn1 = tk.Button(page6, text="OK", command=self.btn_click5)
        Btonn1.place(relx=0.7, rely=0.6, anchor='center')
    def btn_click6(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()
        x8 = self.Entry8.get()
        x9 = self.Entry9.get()
        x10 = self.Entry10.get()
        x11 = self.Entry11.get()
        x12 = self.Entry12.get()



        x1 = float(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        x8 = float(x8)
        x9 = float(x9)
        x10 = float(x10)
        x11 = float(x11)
        x12 = float(x12)
        v1 = [[x1, x2, x3, x4, x5, x6, x7, x5 / x6, x6 / x7, x8 / x9, x9 / x10, x11, x12, x5 * x8 / x11, x6 * x9 / x12]]
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
           modle_ = keras.models.load_model('D:\double modle6.h5')
           v2 = pd.DataFrame(v1, columns=['L1/um', 'L2/um', 'D1/um', 'D2/um', 'Uof', 'Umf', 'Uif',
                                       'Uo/m',
                                       'Um/i', 'λo/m', 'λm/i', 'λo/m', 'λm/i'
            , 'Ca1', 'Ca2'])
           y = modle_.predict(v2)
           xianshi = tk.Toplevel()
           xianshi.geometry("400x200+500+350")
           xianshi.title("result")
           self.xianshi_label = tk.Entry(xianshi)
           self.xianshi_label.insert(0, str(y))
           self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
           self.labels = tk.Label(xianshi, text="Hz")
           self.labels.place(relx=0.6, rely=0.5, anchor='center')
           self.labels_ = tk.Label(xianshi, text="generation rate of double emulsion droplet")
           self.labels_.place(relx=0.35, rely=0.5, anchor='center')

    def create_page7(self):
        page7 = tk.Toplevel(self.root)
        page7.geometry("800x400+500+350")
        label1 = tk.Label(page7, text="Directional design of target double emulsion droplet", font="Arial")
        label1.place(relx=0.5, rely=0.1, anchor='center')
        image = Image.open("C:\\Users\李浩\Desktop\desk_3.png")
        image = image.resize((513, 433))
        photo = ImageTk.PhotoImage(image)
        label.image = photo

        self.Entry1 = tk.Entry(page7)
        self.Entry1.place(relx=0.3, rely=0.2, anchor='center')
        label2 = tk.Label(page7, text="L1")
        label2.place(relx=0.1, rely=0.2, anchor='center')
        label2_ = tk.Label(page7, text="(150μm<x<300μm)")
        label2_.place(relx=0.4, rely=0.2, anchor='center')
        self.Entry2 = tk.Entry(page7)
        self.Entry2.place(relx=0.3, rely=0.3, anchor='center')
        label3 = tk.Label(page7, text="L2")
        label3.place(relx=0.1, rely=0.3, anchor='center')
        label3_ = tk.Label(page7, text="(30μm<x<100μm)")
        label3_.place(relx=0.4, rely=0.3, anchor='center')
        self.Entry3 = tk.Entry(page7)
        self.Entry3.place(relx=0.3, rely=0.4, anchor='center')
        label4 = tk.Label(page7, text="D1")
        label4.place(relx=0.1, rely=0.4, anchor='center')
        label4_ = tk.Label(page7, text="(100μm<x<150μm)")
        label4_.place(relx=0.4, rely=0.4, anchor='center')
        self.Entry4 = tk.Entry(page7)
        self.Entry4.place(relx=0.3, rely=0.5, anchor='center')
        label5 = tk.Label(page7, text="D2")
        label5.place(relx=0.1, rely=0.5, anchor='center')
        label5_ = tk.Label(page7, text="(50μm<x<100μm)")
        label5_.place(relx=0.4, rely=0.5, anchor='center')
        self.Entry5 = tk.Entry(page7)
        self.Entry5.place(relx=0.3, rely=0.6, anchor='center')
        label6 = tk.Label(page7, text="Outer diameter")
        label6.place(relx=0.1, rely=0.6, anchor='center')
        label6_ = tk.Label(page7, text="(500μm<x<900μm)")
        label6_.place(relx=0.4, rely=0.6, anchor='center')
        self.Entry6 = tk.Entry(page7)
        self.Entry6.place(relx=0.3, rely=0.7, anchor='center')
        label7 = tk.Label(page7, text="Middle fluid velocity")
        label7.place(relx=0.1, rely=0.7, anchor='center')
        label7_ = tk.Label(page7, text="(30μL/min<x<150μL/min)")
        label7_.place(relx=0.4, rely=0.7, anchor='center')
        self.Entry7 = tk.Entry(page7)
        self.Entry7.place(relx=0.3, rely=0.8, anchor='center')
        label8 = tk.Label(page7, text="Inner fluid velocity")
        label8.place(relx=0.1, rely=0.8, anchor='center')
        label8_ = tk.Label(page7, text="(5μL/min<x<140μL/min)")
        label8_.place(relx=0.4, rely=0.8, anchor='center')
        self.Entry8 = tk.Entry(page7)
        self.Entry8.place(relx=0.3, rely=0.9, anchor='center')
        label9 = tk.Label(page7, text="Outer fluid viscosity")
        label9.place(relx=0.1, rely=0.9, anchor='center')
        label9_ = tk.Label(page7, text="(1mm^2/s<x<40mm^2/s)")
        label9_.place(relx=0.4, rely=0.9, anchor='center')
        self.Entry9 = tk.Entry(page7)
        self.Entry9.place(relx=0.8, rely=0.2, anchor='center')
        label10 = tk.Label(page7, text="Middle fluid viscosity")
        label10.place(relx=0.6, rely=0.2, anchor='center')
        label10_ = tk.Label(page7, text="(1mm^2/s<x<20mm^2/s)")
        label10_.place(relx=0.9, rely=0.2, anchor='center')
        self.Entry10 = tk.Entry(page7)
        self.Entry10.place(relx=0.8, rely=0.3, anchor='center')
        label11 = tk.Label(page7, text="Inner fluid viscosity")
        label11.place(relx=0.6, rely=0.3, anchor='center')
        label11_ = tk.Label(page7, text="(1mm^2/s<x<20mm^2/s)")
        label11_.place(relx=0.9, rely=0.3, anchor='center')
        self.Entry11 = tk.Entry(page7)
        self.Entry11.place(relx=0.8, rely=0.4, anchor='center')
        label12 = tk.Label(page7, text="OF/MF interaction tension")
        label12.place(relx=0.6, rely=0.4, anchor='center')
        label12_ = tk.Label(page7, text="(1mN/m<x<5mN/m)")
        label12_.place(relx=0.9, rely=0.4, anchor='center')
        self.Entry12 = tk.Entry(page7)
        self.Entry12.place(relx=0.8, rely=0.5, anchor='center')
        label13 = tk.Label(page7, text="MF/IF interaction tension")
        label13.place(relx=0.6, rely=0.5, anchor='center')
        label13_ = tk.Label(page7, text="(1mN/m<x<3mN/m)")
        label13_.place(relx=0.9, rely=0.5, anchor='center')
        self.Entry13 = tk.Entry(page7)
        self.Entry13.place(relx=0.8, rely=0.6, anchor='center')
        label14 = tk.Label(page7, text="Inner diameter")
        label14.place(relx=0.6, rely=0.6, anchor='center')
        label14_ = tk.Label(page7, text="(150μm<x<500μm)")
        label14_.place(relx=0.9, rely=0.6, anchor='center')

        Btonn1 = tk.Button(page7, text="OK", command=self.btn_click7)
        Btonn1.place(relx=0.75, rely=0.7, anchor='center')

    def btn_click7(self):
        x1 = self.Entry1.get()
        x2 = self.Entry2.get()
        x3 = self.Entry3.get()
        x4 = self.Entry4.get()
        x5 = self.Entry5.get()
        x6 = self.Entry6.get()
        x7 = self.Entry7.get()
        x8 = self.Entry8.get()
        x9 = self.Entry9.get()
        x10 = self.Entry10.get()
        x11 = self.Entry11.get()
        x12 = self.Entry12.get()
        x13 = self.Entry13.get()

        x1 = float(x1)
        x2 = float(x2)
        x3 = float(x3)
        x4 = float(x4)
        x5 = float(x5)
        x6 = float(x6)
        x7 = float(x7)
        x8 = float(x8)
        x9 = float(x9)
        x10 = float(x10)
        x11 = float(x11)
        x12 = float(x12)
        x13 = float(x13)
        v1 = [[x1, x2, x3, x4, x5, x6, x7, x5 / x6, x6 / x7, x8 / x9, x9 / x10, x11, x12, x5 * x8 / x11,
               x6 * x9 / x12,x13]]
        with custom_object_scope({'rmse': rmse}, {'r_square': r_square}):
            modle_ = keras.models.load_model('D:\double modle6.h5')
            v2 = pd.DataFrame(v1, columns=['L1/um', 'L2/um', 'D1/um', 'D2/um', 'douter', 'dinner','Umf', 'Uif',
                                       'Uo/m',
                                       'Um/i', 'λo/m', 'λm/i', 'λo/m', 'λm/i'
            , 'Ca1', 'Ca2'])
            y = modle_.predict(v2)
            xianshi = tk.Toplevel()
            xianshi.geometry("400x200+500+350")
            xianshi.title("result")
            self.xianshi_label = tk.Entry(xianshi)
            self.xianshi_label.insert(0, str(y))
            self.xianshi_label.place(relx=0.5, rely=0.5, anchor='center')
            self.labels = tk.Label(xianshi, text="μL/min")
            self.labels.place(relx=0.7, rely=0.5, anchor='center')
            self.labels_ = tk.Label(xianshi, text="outer fluid velocity")
            self.labels_.place(relx=0.3, rely=0.5, anchor='center')


if __name__ == "__main__":
    root = tk.Tk()
    app = MainApp(root)
    root.mainloop()